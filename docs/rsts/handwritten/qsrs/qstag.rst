Qualitative Spatio-Temporal Activity Graphs
===========================================

A Qualitative Spatio-Temporal Activity Graph (QSTAG) provides a compact and efficient graph
structure to represent both qualitative spatial and temporal information about entities,
allowing the use of standard graph comparison techniques.

Structure
---------
The structure of a QSTAG consists of three layers:

* The objects layer consists of nodes representing the objects in the scene.
* The spatial relations layer consists of nodes that represent QSR intervals between the object layer nodes. These QSR intervals are generated by merging together repeated QSR values over the time interval they hold.
* The temporal relations layer consists of nodes that encode Allen interval algebra (IA) relations between the QSR intervals.

.. image:: ../images/qstag.png
   :height: 200px
   :width: 400 px

Episodes
--------
To begin, the QSR_World_Trace is converted into a QSR Episode representation. A QSR Episode can be thought of as an
interval of time where a QSR holds between some objects.

**The structure of an Episode:**

.. code:: bash

        [ [objects], {spatial relations}, (duration) ]

where:

* [objects] is a list of objects,
* {spatial relations} is a dictionary of spatial relations which hold where the Key is the Type of QSR Relation, and the value is QSR relation, i.e. {"rcc2" : "dc"}
* (duration) is a tuple containing the interval of discrete time that the spatial relations hold for, comprising of (start_frame, end_frame).


.. _usage:

Usage
-----

To use, first create a QSR_World_Trace (qsrlib_response_message) in the normal way.

**Standard Steps for Creating QSR_World_Trace:**

* Create a QSRlib object
* Convert your data in to QSRlib standard input format
* Make a request to QSRlib (or a request to QSRlib using ROS)


**Steps for Creating a QSTAG:**

.. code:: python

    qstag = qsrlib_response_message.qstag

Note: If you want your object nodes to contain *object types* make sure to include this in the dynamic_args:

Also, if you want the spatial relations only created for certain objects, use the `qsr_for` dictionary.

.. code:: python

    object_types = {"o1": "Human",
                    "o2": "Chair"}

    which_qsr = ["qtcbs", "argd", "mos"]

    dynamic_args = {"qtcbs": {"quantisation_factor": args.quantisation_factor,
                              "validate": args.validate,
                              "no_collapse": args.no_collapse,
                              "qsrs_for": [("o1", "o2"),("o1", "o3")]},

                    "argd": {"qsr_relations_and_values": args.distance_threshold,
                              "qsrs_for":  [("o1", "o2")]},

                    "mos": {"qsrs_for": [("o1"), ("o2")]},

                    "qstag": {"object_types" : object_types} }


Visualize the QSTAG
-------------------

A method to save the QSTAG as a dot file, and convert it to a png image.

.. code:: python

    qstag = qsrlib_response_message.qstag

    qstag.graph2dot('/tmp/act_gr.dot')
    os.system('dot -Tpng /tmp/act_gr.dot -o /tmp/act_gr.png')



Parse the Episodes and QSTAG
----------------------------

.. code:: python

    qstag = qsrlib_response_message.qstag

    print("All the Episodes...")
    for episode in qstag.episodes:
        print(episode)

    print("The QSTAG Graph: \n", qstag.graph)

    print("All the Graph NODES:")
    for node in qstag.graph.vs():
        print(node)

    print("All the Graph EDGES:")
    for edge in qstag.graph.es():
        print(edge, " from: ", edge.source, " to: ", edge.target)


Example of QSTAG code
---------------------

An example script for generating a simple QSTAG is available in `/strands_qsr_lib/qsr_lib/scripts/`:

.. code:: bash

    ./qstag_example.py <qsr_name>

e.g.

.. code:: bash

    ./qstag_example.py qtcbs
